import config from './config.js';

// √âl√©ments du DOM
const chatMessages = document.getElementById('chat-messages');
const userInput = document.getElementById('user-input');
const sendButton = document.getElementById('send-button');
const themeToggle = document.getElementById('theme-toggle');
const loadingIndicator = document.getElementById('loading-indicator');

// Constantes de s√©curit√©
const MAX_MESSAGE_LENGTH = 1000; // Limite de caract√®res par message
const MAX_MESSAGES = 50; // Limite de messages dans l'historique

// Historique des messages
let messageHistory = [];

// Fonction de sanitization pour la protection XSS
export function sanitizeInput(input) {
    return input;
}

// Fonction de validation des entr√©es
export function validateMessage(message) {
    // V√©rifier la longueur
    if (message.length > MAX_MESSAGE_LENGTH) {
        throw new Error(`Le message ne doit pas d√©passer ${MAX_MESSAGE_LENGTH} caract√®res.`);
    }

    // V√©rifier si le message est vide
    if (!message.trim()) {
        throw new Error('Le message ne peut pas √™tre vide.');
    }

    // V√©rifier les caract√®res sp√©ciaux dangereux
    const dangerousPattern = /<script|javascript:|on\w+=/gi;
    if (dangerousPattern.test(message)) {
        throw new Error('Le message contient des caract√®res non autoris√©s.');
    }

    return message.trim();
}

// Fonction pour ajouter un message √† l'historique
function addMessageToHistory(role, content) {
    const message = {
        role,
        content,
        timestamp: new Date()
    };
    
    messageHistory.push(message);
    
    // Limiter la taille de l'historique
    if (messageHistory.length > MAX_MESSAGES) {
        messageHistory = messageHistory.slice(-MAX_MESSAGES);
    }
}

// Fonction pour afficher un message dans le chat
function displayMessage(content, isUser = false) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${isUser ? 'user-message' : 'bot-message'}`;
    
    const contentDiv = document.createElement('div');
    contentDiv.className = 'message-content';
    contentDiv.textContent = content;
    
    const timeDiv = document.createElement('div');
    timeDiv.className = 'message-time';
    timeDiv.textContent = new Date().toLocaleTimeString();
    
    messageDiv.appendChild(contentDiv);
    messageDiv.appendChild(timeDiv);
    
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Fonction pour envoyer un message √† l'API
export async function sendToAPI(message) {
    try {
        console.log('Envoi de la requ√™te √† l\'API...');
        console.log('URL:', config.API_URL);
        console.log('Mod√®le:', config.MODEL);
        console.log('Historique des messages:', messageHistory);
        
        const requestBody = {
            model: config.MODEL,
            messages: messageHistory.map(msg => ({
                role: msg.role,
                content: msg.content
            })),
            temperature: 0.7,
            max_tokens: 1000
        };
        
        console.log('Corps de la requ√™te:', JSON.stringify(requestBody, null, 2));
        
        const response = await fetch(config.API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${config.API_KEY}`,
                'HTTP-Referer': window.location.origin || 'http://localhost',
                'X-Title': 'Mon Chatbot'
            },
            body: JSON.stringify(requestBody)
        });

        console.log('Statut de la r√©ponse:', response.status);
        console.log('En-t√™tes de la r√©ponse:', Object.fromEntries(response.headers.entries()));

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            console.error('D√©tails de l\'erreur API:', {
                status: response.status,
                statusText: response.statusText,
                errorData
            });
            throw new Error(`Erreur API: ${response.status} - ${errorData.error?.message || response.statusText || 'Erreur inconnue'}`);
        }

        const data = await response.json();
        console.log('R√©ponse de l\'API:', data);
        return data.choices[0].message.content;
    } catch (error) {
        console.error('Erreur d√©taill√©e:', error);
        throw error;
    }
}

// Afficher/masquer l'indicateur de chargement
function toggleLoading(show) {
    loadingIndicator.style.display = show ? 'block' : 'none';
}

// Fonction pour envoyer un message
async function handleSendMessage() {
    const message = userInput.value.trim();
    if (!message) return;
    
    try {
        // Valider le message
        validateMessage(message);
        
        // Afficher le message de l'utilisateur
        displayMessage(message, true);
        addMessageToHistory('user', message);
        
        // R√©initialiser l'input
        userInput.value = '';
        userInput.style.height = 'auto';
        
        // Afficher l'indicateur de chargement
        toggleLoading(true);
        
        // Envoyer √† l'API
        const response = await sendToAPI(message);
        
        // Afficher la r√©ponse
        displayMessage(response);
        addMessageToHistory('assistant', response);
    } catch (error) {
        console.error('Erreur:', error);
        displayMessage("D√©sol√©, j'ai rencontr√© une erreur. Pouvez-vous r√©essayer ?");
    } finally {
        toggleLoading(false);
    }
}

// Initialisation de l'interface utilisateur (seulement si les √©l√©ments existent)
if (typeof window !== 'undefined' && document.getElementById('theme-toggle')) {
    // Gestion du th√®me
    const currentTheme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-theme', currentTheme);
    themeToggle.textContent = currentTheme === 'light' ? 'üåô' : '‚òÄÔ∏è';
    themeToggle.setAttribute('aria-pressed', currentTheme === 'dark');

    // Ajouter le message syst√®me au d√©but de la conversation
    addMessageToHistory('system', 'Tu es un assistant IA fran√ßais amical et serviable. Tu dois r√©pondre en fran√ßais et maintenir un ton professionnel mais accessible. Tu dois t\'adapter au contexte de la conversation et te souvenir des √©changes pr√©c√©dents.');

    themeToggle.addEventListener('click', () => {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        themeToggle.setAttribute('aria-pressed', newTheme === 'dark');
    });

    // Ajustement automatique de la hauteur du textarea
    userInput.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = (this.scrollHeight) + 'px';
        
        // Mettre √† jour l'attribut aria-invalid si n√©cessaire
        const isValid = this.value.length <= MAX_MESSAGE_LENGTH;
        this.setAttribute('aria-invalid', !isValid);
        this.setAttribute('aria-valuenow', this.value.length);
        this.setAttribute('aria-valuemax', MAX_MESSAGE_LENGTH);
    });

    // Gestionnaires d'√©v√©nements
    sendButton.addEventListener('click', handleSendMessage);
    userInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage();
        }
    });
} 